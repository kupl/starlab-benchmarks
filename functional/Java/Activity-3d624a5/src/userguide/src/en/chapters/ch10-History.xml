<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter id="history">

  <title>History</title>
  
  <para>History is the component that captures what happened
  during process execution and stores it permanently.  In contrast to the runtime data, 
  the history data will remain present in the DB also after process instances have completed.
  </para>
  
  <para>There are 4 history entities:
  
    <itemizedlist>
      <listitem>
        <para><literal>HistoricProcessInstance</literal>s containing information about current and past process instances.</para>
      </listitem>
      <listitem>
        <para><literal>HistoricActivityInstance</literal>s containing information about a single execution of an activity (node in the process).</para>
      </listitem>
      <listitem>
        <para><literal>HistoricTaskInstance</literal>s containing information about current and past (completed and deleted) task instances.</para>
      </listitem>
      <listitem>
        <para><literal>HistoricDetail</literal>s containing various kinds of information related to either a historic process instances, an activity instance or a task instance.</para>
      </listitem>
    </itemizedlist>
  </para>
  
  <para>Since the DB contains historic entities for past as well as ongoing instances, you might want to consider 
  querying these tables in order to minimize access to the runtime process instance data 
  and that way keeping the runtime execution performant.
  </para>
  <para>Later on, this information will be exposed in Activiti Explorer.
  Also, it will be the information from which the reports will be generated.
  </para>
  
  <section id="historyQuery">
    <title>Querying history</title>
    <para>In the API, it's possible to query all 4 of the History entities. The HistoryService exposes the the methods 
      <literal>createHistoricProcessInstanceQuery()</literal>, <literal>createHistoricActivityInstanceQuery()</literal>, 
      <literal>createHistoricDetailQuery()</literal> and <literal>createHistoricTaskInstanceQuery()</literal>.
    </para>
    
  
  <para>Below are a couple of examples that show some of the possibilities of the query API for history. Full description of the possibilities can be found in the <ulink url="../javadocs/index.html">the javadocs</ulink>, in the <literal>org.activiti.engine.history</literal> package.</para>
  <section id="historyQueryProcessInstance">
      <title>HistoricProcessInstanceQuery</title>
       <para>Get 10 <literal>HistoricProcessInstances</literal> that are finished and which took the most time to complete (the longest duration) of all finished processes with definition 'XXX'.
          <programlisting>
historyService.createHistoricProcessInstanceQuery()
  .finished()
  .processDefinitionId("XXX")
  .orderByProcessInstanceDuration().desc()
  .listPage(0, 10);</programlisting>
      </para>
    </section>  
    
    <section id="historyQueryActivityInstance">
      <title>HistoricActivityInstanceQuery</title>
       <para>Get the last <literal>HistoricActivityInstance</literal> of type 'serviceTask' that has been finished in any process that uses the processDefinition with id XXX.
  <programlisting>
historyService.createHistoricActivityInstanceQuery()
  .activityType("serviceTask")
  .processDefinitionId("XXX")
  .finished()
  .orderByHistoricActivityInstanceEndTime().desc()
  .listPage(0, 1);</programlisting>
      </para>
    </section>  
    <section id="historyQueryDetail">
      <title>HistoricDetailQuery</title>
       <para>The next example, gets all variable-updates that have been done in process with id 123. Only <literal>HistoricVariableUpdate</literal>s will be returned by this query. Note that it's possible that a certain variable name has multiple <literal>HistoricVariableUpdate</literal>
    entries, for each time the variable was updated in the process. You can use <literal>orderByTime</literal> (the time the variable update was done) or <literal>orderByVariableRevision</literal> (revision of runtime variable at the time of updating) to find out in what order they occurred.
  <programlisting>
historyService.createHistoricDetailQuery()
  .variableUpdates()
  .processInstanceId("123")
  .orderByVariableName().asc()
  .list()</programlisting>
    </para>
   <para>This example gets all <link linkend="formProperties">form-properties</link> that were submitted in any task or when starting the process with id "123". Only <literal>HistoricFormProperties</literal>s will be returned by this query.
  <programlisting>
historyService.createHistoricDetailQuery()
  .formProperties()
  .processInstanceId("123")
  .orderByVariableName().asc()
  .list()</programlisting>
  </para>
  
  <para>The last example gets all variable updates that were performed on the task with id "123". This returns all <literal>HistoricVariableUpdates</literal> for variables that were set on the task (task local variables), and NOT on the process instance.</para>
<programlisting>
historyService.createHistoricDetailQuery()
  .variableUpdates()
  .taskId("123")
  .orderByVariableName().asc()
  .list()
  </programlisting>
  <para>
  Task local variables can be set using the <literal>TaskService</literal> or on a <literal>DelegateTask</literal>, inside <literal>TaskListener</literal>:
  <programlisting>
taskService.setVariableLocal("123", "myVariable", "Variable value");</programlisting>
  <programlisting>
public void notify(DelegateTask delegateTask) {
  delegateTask.setVariableLocal("myVariable", "Variable value");
}</programlisting>
</para>
    </section>  
<section id="historyQueryTaskInstance">
      <title>HistoricTaskInstanceQuery</title>
       <para>Get 10 <literal>HistoricTaskInstance</literal>s that are finished and which took the most time to complete (the longest duration) of all tasks.
          <programlisting>
historyService.createHistoricTaskInstanceQuery()
  .finished()
  .orderByHistoricTaskInstanceDuration().desc()
  .listPage(0, 10);</programlisting>
      </para>
      
       <para>Get <literal>HistoricTaskInstance</literal>s that are deleted with a delete reason that contains "invalid", which were last assigned to user 'kermit'.
          <programlisting>
historyService.createHistoricTaskInstanceQuery()
  .finished()
  .taskDeleteReasonLike("%invalid%")
  .taskAssignee("kermit")
  .listPage(0, 10);</programlisting>
      </para>
    </section>      
</section>
  <section id="historyConfig">
    <title>History configuration</title>
	  <para>The history level can be configured programmatically, using the <literal>HISTORY_*</literal>constants defined on <literal>ProcessEngineConfiguration</literal>:</para>
      <programlisting>
ProcessEngine processEngine = ProcessEngineConfiguration
  .createProcessEngineConfigurationFromResourceDefault()
  <emphasis role="bold">.setHistory(ProcessEngineConfiguration.HISTORY_AUDIT)</emphasis>
  .buildProcessEngine();
      </programlisting>
      
      <para>The level can also be configured in activiti.cfg.xml or in a spring-context:</para>
	  
	  <programlisting>&lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration&quot;&gt;
  &lt;property name=&quot;history&quot; value=&quot;audit&quot; /&gt;
  ...
&lt;/bean&gt;</programlisting>
	  
	  <para>Following history levels can be configured:
	  </para>
	  
	  <itemizedlist>
	    <listitem><para><literal>none</literal>: skips all history archiving.  This is the most performant for runtime 
	    process execution, but no historical information will be available. </para></listitem>
	    <listitem><para><literal>activity</literal>: archives all process instances and activity instances. 
	    No details will be archived</para></listitem>
	    <listitem><para><literal>audit</literal>: This is the default. It archives all process instances, 
	    activity instances and all form properties that are submitted so that all user interaction 
	    through forms is traceable and can be audited.</para></listitem>
	    <listitem><para><literal>full</literal>: This is the highest level of history archiving and hence the 
	    slowest.  This level stores all information as in the <literal>audit</literal> level 
	    plus all other possible details, mostly this are process variable updates.</para></listitem>
	  </itemizedlist>
  </section>
  
  <section id="historyFormAuditPurposes">
    <title>History for audit purposes</title>
    
    <para>When <link linkend="historyConfig">configuring</link> at least <literal>audit</literal> level
    for configuration. Then all properties submitted through methods 
    <literal>FormService.submitStartFormData(String processDefinitionId, Map&lt;String, String&gt; properties)</literal>
    and <literal>FormService.submitTaskFormData(String taskId, Map&lt;String, String&gt; properties)</literal>
    are recorded.
    </para>

    <para><emphasis role="bold">[KNOWN LIMITATION]</emphasis> Currently the forms as worked out in Activiti Explorer
    do not yet use the <literal>submitStartFormData</literal> and <literal>submitTaskFormData</literal>.
    So the form properties are not yet archived when using the forms in Activity Explorer. A workaround is to set the historyLevel to full and use the variableUpdates to see what values were set in userTasks.
    @see <ulink url="http://jira.codehaus.org/browse/ACT-294">ACT-294</ulink>
    </para>
    
    <para>Form properties can be retrieved with the query API like this:</para>
    
    <programlisting>historyService
      .createHistoricDetailQuery()
      .onlyFormProperties()
      ...
      .list();</programlisting>
      
    <para>In that case only historic details of type <literal>HistoricFormProperty</literal> are returned.
    </para>
    
    <para>If you've set the authenticated user before calling the submit methods with
    <literal>IdentityService.setAuthenticatedUserId(String)</literal> then that authenticated user 
    who submitted the form will be accessible in the history as well with
    <literal>HistoricProcessInstance.getStartUserId()</literal> for start forms and 
    <literal>HistoricActivityInstance.getAssignee()</literal> for task forms.
    </para>
    
  </section>
  
</chapter>
package org.apache.maven.tools.plugin.generator;

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import static java.nio.charset.StandardCharsets.UTF_8;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.apache.maven.plugin.descriptor.DuplicateMojoDescriptorException;
import org.apache.maven.plugin.descriptor.MojoDescriptor;
import org.apache.maven.plugin.descriptor.Parameter;
import org.apache.maven.plugin.descriptor.PluginDescriptor;
import org.apache.maven.plugin.descriptor.Requirement;
import org.apache.maven.plugin.logging.Log;
import org.apache.maven.project.MavenProject;
import org.apache.maven.tools.plugin.ExtendedMojoDescriptor;
import org.apache.maven.tools.plugin.PluginToolsRequest;
import org.apache.maven.tools.plugin.util.PluginUtils;
import org.codehaus.plexus.util.IOUtil;
import org.codehaus.plexus.util.StringUtils;
import org.codehaus.plexus.util.xml.PrettyPrintXMLWriter;
import org.codehaus.plexus.util.xml.XMLWriter;

/**
 * Generate a <a href="/ref/current/maven-plugin-api/plugin.html">Maven Plugin Descriptor XML file</a> and
 * corresponding <code>plugin-help.xml</code> help content for {@link PluginHelpGenerator}.
 *
 */
public class PluginDescriptorGenerator
    implements Generator
{

    private final Log log;

    public PluginDescriptorGenerator( Log log )
    {
        this.log = log;
    }

    /**
     * {@inheritDoc}
     */
    public void execute( File destinationDirectory, PluginToolsRequest request )
        throws GeneratorException
    {
        // eventually rewrite help mojo class to match actual package name
        PluginHelpGenerator.rewriteHelpMojo( request, log );

        try
        {
            // write complete plugin.xml descriptor
            File f = new File( destinationDirectory, "plugin.xml" );
            writeDescriptor( f, request, false );

            // write plugin-help.xml help-descriptor
            MavenProject mavenProject = request.getProject();

            f = new File( mavenProject.getBuild().getOutputDirectory(),
                          PluginHelpGenerator.getPluginHelpPath( mavenProject ) );

            writeDescriptor( f, request, true );
        }
        catch ( IOException e )
        {
            throw new GeneratorException( e.getMessage(), e );
        }
        catch ( DuplicateMojoDescriptorException e )
        {
            throw new GeneratorException( e.getMessage(), e );
        }
    }

    private String getVersion()
    {
        Package p = this.getClass().getPackage();
        String version = ( p == null ) ? null : p.getSpecificationVersion();
        return ( version == null ) ? "SNAPSHOT" : version;
    }

    public void writeDescriptor( File destinationFile, PluginToolsRequest request, boolean helpDescriptor )
        throws IOException, DuplicateMojoDescriptorException
    {
        PluginDescriptor pluginDescriptor = request.getPluginDescriptor();

        if ( destinationFile.exists() )
        {
            destinationFile.delete();
        }
        else
        {
            if ( !destinationFile.getParentFile().exists() )
            {
                destinationFile.getParentFile().mkdirs();
            }
        }

        Writer writer = null;
        try
        {
            writer = new OutputStreamWriter( new FileOutputStream( destinationFile ), UTF_8 );

            XMLWriter w = new PrettyPrintXMLWriter( writer, UTF_8.name(), null );

            w.writeMarkup( "\n<!-- Generated by maven-plugin-tools " + getVersion() + " -->\n\n" );

            w.startElement( "plugin" );

            GeneratorUtils.element( w, "name", pluginDescriptor.getName() );

            GeneratorUtils.element( w, "description", pluginDescriptor.getDescription(), helpDescriptor );

            GeneratorUtils.element( w, "groupId", pluginDescriptor.getGroupId() );

            GeneratorUtils.element( w, "artifactId", pluginDescriptor.getArtifactId() );

            GeneratorUtils.element( w, "version", pluginDescriptor.getVersion() );

            GeneratorUtils.element( w, "goalPrefix", pluginDescriptor.getGoalPrefix() );

            if ( !helpDescriptor )
            {
                GeneratorUtils.element( w, "isolatedRealm", String.valueOf( pluginDescriptor.isIsolatedRealm() ) );

                GeneratorUtils.element( w, "inheritedByDefault",
                                        String.valueOf( pluginDescriptor.isInheritedByDefault() ) );
            }

            w.startElement( "mojos" );

            if ( pluginDescriptor.getMojos() != null )
            {
                @SuppressWarnings( "unchecked" ) List<MojoDescriptor> descriptors = pluginDescriptor.getMojos();

                PluginUtils.sortMojos( descriptors );

                for ( MojoDescriptor descriptor : descriptors )
                {
                    processMojoDescriptor( descriptor, w, helpDescriptor );
                }
            }

            w.endElement();

            if ( !helpDescriptor )
            {
                GeneratorUtils.writeDependencies( w, pluginDescriptor );
            }

            w.endElement();

            writer.flush();

        }
        finally
        {
            IOUtil.close( writer );
        }
    }

    protected void processMojoDescriptor( MojoDescriptor mojoDescriptor, XMLWriter w )
    {
        processMojoDescriptor( mojoDescriptor, w, false );
    }

    /**
     * @param mojoDescriptor not null
     * @param w              not null
     * @param helpDescriptor will clean html content from description fields
     */
/**
 *
 *
 * @param mojoDescriptor
 * 		not null
 * @param w
 * 		not null
 * @param helpDescriptor
 * 		will clean html content from description fields
 */
protected void processMojoDescriptor(org.apache.maven.plugin.descriptor.MojoDescriptor mojoDescriptor, org.codehaus.plexus.util.xml.XMLWriter w, boolean helpDescriptor) {
    w.startElement("mojo");
    // ----------------------------------------------------------------------
    // 
    // ----------------------------------------------------------------------
    w.startElement("goal");
    w.writeText(mojoDescriptor.getGoal());
    w.endElement();
    // ----------------------------------------------------------------------
    // 
    // ----------------------------------------------------------------------
    java.lang.String description = mojoDescriptor.getDescription();
    if (org.codehaus.plexus.util.StringUtils.isNotEmpty(description)) {
        w.startElement("description");
        if (helpDescriptor) {
            w.writeText(org.apache.maven.tools.plugin.generator.GeneratorUtils.toText(mojoDescriptor.getDescription()));
        } else {
            w.writeText(mojoDescriptor.getDescription());
        }
        w.endElement();
    }
    // ----------------------------------------------------------------------
    // 
    // ----------------------------------------------------------------------
    if (org.codehaus.plexus.util.StringUtils.isNotEmpty(mojoDescriptor.isDependencyResolutionRequired())) {
        org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "requiresDependencyResolution", mojoDescriptor.isDependencyResolutionRequired());
    }
    // ----------------------------------------------------------------------
    // 
    // ----------------------------------------------------------------------
    org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "requiresDirectInvocation", java.lang.String.valueOf(mojoDescriptor.isDirectInvocationOnly()));
    // ----------------------------------------------------------------------
    // 
    // ----------------------------------------------------------------------
    org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "requiresProject", java.lang.String.valueOf(mojoDescriptor.isProjectRequired()));
    // ----------------------------------------------------------------------
    // 
    // ----------------------------------------------------------------------
    org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "requiresReports", java.lang.String.valueOf(mojoDescriptor.isRequiresReports()));
    // ----------------------------------------------------------------------
    // 
    // ----------------------------------------------------------------------
    org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "aggregator", java.lang.String.valueOf(mojoDescriptor.isAggregator()));
    // ----------------------------------------------------------------------
    // 
    // ----------------------------------------------------------------------
    org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "requiresOnline", java.lang.String.valueOf(mojoDescriptor.isOnlineRequired()));
    // ----------------------------------------------------------------------
    // 
    // ----------------------------------------------------------------------
    org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "inheritedByDefault", java.lang.String.valueOf(mojoDescriptor.isInheritedByDefault()));
    // ----------------------------------------------------------------------
    // 
    // ----------------------------------------------------------------------
    if (org.codehaus.plexus.util.StringUtils.isNotEmpty(mojoDescriptor.getPhase())) {
        org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "phase", mojoDescriptor.getPhase());
    }
    // ----------------------------------------------------------------------
    // 
    // ----------------------------------------------------------------------
    if (org.codehaus.plexus.util.StringUtils.isNotEmpty(mojoDescriptor.getExecutePhase())) {
        org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "executePhase", mojoDescriptor.getExecutePhase());
    }
    if (org.codehaus.plexus.util.StringUtils.isNotEmpty(mojoDescriptor.getExecuteGoal())) {
        org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "executeGoal", mojoDescriptor.getExecuteGoal());
    }
    if (org.codehaus.plexus.util.StringUtils.isNotEmpty(mojoDescriptor.getExecuteLifecycle())) {
        org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "executeLifecycle", mojoDescriptor.getExecuteLifecycle());
    }
    // ----------------------------------------------------------------------
    // 
    // ----------------------------------------------------------------------
    w.startElement("implementation");
    w.writeText(mojoDescriptor.getImplementation());
    w.endElement();
    // ----------------------------------------------------------------------
    // 
    // ----------------------------------------------------------------------
    w.startElement("language");
    w.writeText(mojoDescriptor.getLanguage());
    w.endElement();
    // ----------------------------------------------------------------------
    // 
    // ----------------------------------------------------------------------
    if (org.codehaus.plexus.util.StringUtils.isNotEmpty(mojoDescriptor.getComponentConfigurator())) {
        w.startElement("configurator");
        w.writeText(mojoDescriptor.getComponentConfigurator());
        w.endElement();
    }
    // ----------------------------------------------------------------------
    // 
    // ----------------------------------------------------------------------
    if (org.codehaus.plexus.util.StringUtils.isNotEmpty(mojoDescriptor.getComponentComposer())) {
        w.startElement("composer");
        w.writeText(mojoDescriptor.getComponentComposer());
        w.endElement();
    }
    // ----------------------------------------------------------------------
    // 
    // ----------------------------------------------------------------------
    w.startElement("instantiationStrategy");
    w.writeText(mojoDescriptor.getInstantiationStrategy());
    w.endElement();
    // ----------------------------------------------------------------------
    // Strategy for handling repeated reference to mojo in
    // the calculated (decorated, resolved) execution stack
    // ----------------------------------------------------------------------
    w.startElement("executionStrategy");
    w.writeText(mojoDescriptor.getExecutionStrategy());
    w.endElement();
    // ----------------------------------------------------------------------
    // 
    // ----------------------------------------------------------------------
    if (mojoDescriptor.getSince() != null) {
        w.startElement("since");
        if (org.codehaus.plexus.util.StringUtils.isEmpty(mojoDescriptor.getSince())) {
            w.writeText("No version given");
        } else {
            w.writeText(mojoDescriptor.getSince());
        }
        w.endElement();
    }
    // ----------------------------------------------------------------------
    // 
    // ----------------------------------------------------------------------
    if (mojoDescriptor.getDeprecated() != null) {
        w.startElement("deprecated");
        if (org.codehaus.plexus.util.StringUtils.isEmpty(mojoDescriptor.getDeprecated())) {
            w.writeText("No reason given");
        } else {
            w.writeText(mojoDescriptor.getDeprecated());
        }
        w.endElement();
    }
    // ----------------------------------------------------------------------
    // Extended (3.0) descriptor
    // ----------------------------------------------------------------------
    if (mojoDescriptor instanceof org.apache.maven.tools.plugin.ExtendedMojoDescriptor) {
        org.apache.maven.tools.plugin.ExtendedMojoDescriptor extendedMojoDescriptor = ((org.apache.maven.tools.plugin.ExtendedMojoDescriptor) (mojoDescriptor));
        if (extendedMojoDescriptor.getDependencyCollectionRequired() != null) {
            org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "requiresDependencyCollection", extendedMojoDescriptor.getDependencyCollectionRequired());
        }
        org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "threadSafe", java.lang.String.valueOf(extendedMojoDescriptor.isThreadSafe()));
    }
    // ----------------------------------------------------------------------
    // Parameters
    // ----------------------------------------------------------------------
    @java.lang.SuppressWarnings("unchecked")
    java.util.List<org.apache.maven.plugin.descriptor.Parameter> parameters = mojoDescriptor.getParameters();
    w.startElement("parameters");
    java.util.Map<java.lang.String, org.apache.maven.plugin.descriptor.Requirement> requirements = new java.util.LinkedHashMap<>();
    java.util.Set<org.apache.maven.plugin.descriptor.Parameter> configuration = new java.util.LinkedHashSet<>();
    {
        if (helpDescriptor) {
            org.apache.maven.tools.plugin.util.PluginUtils.sortMojoParameters(/* NPEX_NULL_EXP */
            parameters);
        }
        for (org.apache.maven.plugin.descriptor.Parameter parameter : parameters) {
            java.lang.String expression = getExpression(parameter);
            if (org.codehaus.plexus.util.StringUtils.isNotEmpty(expression) && expression.startsWith("${component.")) {
                // treat it as a component...a requirement, in other words.
                // remove "component." plus expression delimiters
                java.lang.String role = expression.substring("${component.".length(), expression.length() - 1);
                java.lang.String roleHint = null;
                int posRoleHintSeparator = role.indexOf('#');
                if (posRoleHintSeparator > 0) {
                    roleHint = role.substring(posRoleHintSeparator + 1);
                    role = role.substring(0, posRoleHintSeparator);
                }
                // TODO: remove deprecated expression
                requirements.put(parameter.getName(), new org.apache.maven.plugin.descriptor.Requirement(role, roleHint));
            } else if (parameter.getRequirement() != null) {
                requirements.put(parameter.getName(), parameter.getRequirement());
            } else // don't show readonly parameters in help
            if ((!helpDescriptor) || parameter.isEditable()) {
                // treat it as a normal parameter.
                w.startElement("parameter");
                org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "name", parameter.getName());
                if (parameter.getAlias() != null) {
                    org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "alias", parameter.getAlias());
                }
                org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "type", parameter.getType());
                if (parameter.getSince() != null) {
                    w.startElement("since");
                    if (org.codehaus.plexus.util.StringUtils.isEmpty(parameter.getSince())) {
                        w.writeText("No version given");
                    } else {
                        w.writeText(parameter.getSince());
                    }
                    w.endElement();
                }
                if (parameter.getDeprecated() != null) {
                    if (org.codehaus.plexus.util.StringUtils.isEmpty(parameter.getDeprecated())) {
                        org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "deprecated", "No reason given");
                    } else {
                        org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "deprecated", parameter.getDeprecated());
                    }
                }
                if (parameter.getImplementation() != null) {
                    org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "implementation", parameter.getImplementation());
                }
                org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "required", java.lang.Boolean.toString(parameter.isRequired()));
                org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "editable", java.lang.Boolean.toString(parameter.isEditable()));
                org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "description", parameter.getDescription(), helpDescriptor);
                if (org.codehaus.plexus.util.StringUtils.isNotEmpty(parameter.getDefaultValue()) || org.codehaus.plexus.util.StringUtils.isNotEmpty(parameter.getExpression())) {
                    configuration.add(parameter);
                }
                w.endElement();
            }
        }
    }
    w.endElement();
    // ----------------------------------------------------------------------
    // Configuration
    // ----------------------------------------------------------------------
    if (!configuration.isEmpty()) {
        w.startElement("configuration");
        for (org.apache.maven.plugin.descriptor.Parameter parameter : configuration) {
            if (helpDescriptor && (!parameter.isEditable())) {
                // don't show readonly parameters in help
                continue;
            }
            w.startElement(parameter.getName());
            java.lang.String type = parameter.getType();
            if (org.codehaus.plexus.util.StringUtils.isNotEmpty(type)) {
                w.addAttribute("implementation", type);
            }
            if (parameter.getDefaultValue() != null) {
                w.addAttribute("default-value", parameter.getDefaultValue());
            }
            if (org.codehaus.plexus.util.StringUtils.isNotEmpty(parameter.getExpression())) {
                w.writeText(parameter.getExpression());
            }
            w.endElement();
        }
        w.endElement();
    }
    // ----------------------------------------------------------------------
    // Requirements
    // ----------------------------------------------------------------------
    if ((!requirements.isEmpty()) && (!helpDescriptor)) {
        w.startElement("requirements");
        for (java.util.Map.Entry<java.lang.String, org.apache.maven.plugin.descriptor.Requirement> entry : requirements.entrySet()) {
            java.lang.String key = entry.getKey();
            org.apache.maven.plugin.descriptor.Requirement requirement = entry.getValue();
            w.startElement("requirement");
            org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "role", requirement.getRole());
            if (org.codehaus.plexus.util.StringUtils.isNotEmpty(requirement.getRoleHint())) {
                org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "role-hint", requirement.getRoleHint());
            }
            org.apache.maven.tools.plugin.generator.GeneratorUtils.element(w, "field-name", key);
            w.endElement();
        }
        w.endElement();
    }
    w.endElement();
}

    /**
     * Get the expression value, eventually surrounding it with <code>${ }</code>.
     *
     * @param parameter the parameter
     * @return the expression value
     */
    private String getExpression( Parameter parameter )
    {
        String expression = parameter.getExpression();
        if ( StringUtils.isNotBlank( expression ) && !expression.contains( "${" ) )
        {
            expression = "${" + expression.trim() + "}";
            parameter.setExpression( expression );
        }
        return expression;
    }
}

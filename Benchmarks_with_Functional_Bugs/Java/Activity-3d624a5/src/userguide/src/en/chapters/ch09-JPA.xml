<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter>

  <title>JPA</title>

  <para>
    You can use JPA-Entities as process variables, allowing you to:
    <itemizedlist>
      <listitem><para>Updating existing JPA-entities based on process variables, that can be filled in on a form in a userTask or generated in a serviceTask.</para></listitem>
      <listitem><para>Reusing existing domain model without having to write explicit services to fetch the entities and update the values</para></listitem>
      <listitem><para>Make decisions (gateways) based on properties of existing entities.</para></listitem>
      <listitem><para>...</para></listitem>
    </itemizedlist>
  </para>

  <section>
    <title>Requirements</title>
    <para>
      Only entities that comply to the following are supported:
      <itemizedlist>
        <listitem>
          <para>
            Entities should be configured using JPA-annotations, we support both field and property-access. Mapped super classes can
            also be used.
	      </para>
        </listitem>
        <listitem>
          <para>
            Entity should have a primary key annotated with <literal>@Id</literal>, compound primary keys are not supported 
            (<literal>@EmbeddedId</literal> and <literal>@IdClass</literal>). The Id field/property can be of any type supported in the JPA-spec:
            Primitive types and their wrappers (excluding boolean), <literal>String</literal>, <literal>BigInteger</literal>, <literal>BigDecimal</literal>,
            <literal>java.util.Date</literal> and <literal>java.sql.Date</literal>.
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
  
   <section id="jpaconfiguration">
    <title>Configuration</title>
    <para>To be able to use JPA-entities, the engine must have a reference to an <literal>EntityManagerFactory</literal>. This can be done by configuring a reference or by supplying a persistence-unit name. JPA-entities used as variables
    will be detected automatically and will be handled accordingly.</para>
    
    <para>
        The example configuration below uses the jpaPersistenceUnitName:
        <programlisting>
&lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration&quot;&gt;
  
    &lt;!-- Database configurations --&gt;
    &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot; /&gt;
    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:h2:mem:JpaVariableTest;DB_CLOSE_DELAY=1000&quot; /&gt;

    <emphasis role="bold">&lt;property name=&quot;jpaPersistenceUnitName&quot; value=&quot;activiti-jpa-pu&quot; /&gt;
    &lt;property name=&quot;jpaHandleTransaction&quot; value=&quot;true&quot; /&gt;
    &lt;property name=&quot;jpaCloseEntityManager&quot; value=&quot;true&quot; /&gt;</emphasis>
    
    &lt;!-- job executor configurations --&gt;
    &lt;property name=&quot;jobExecutorActivate&quot; value=&quot;false&quot; /&gt;
    
    &lt;!-- mail server configurations --&gt;
    &lt;property name=&quot;mailServerPort&quot; value=&quot;5025&quot; /&gt;    
&lt;/bean&gt;
        </programlisting>  
         The next example configuration below provides a <literal>EntityManagerFactory</literal> which we define ourselves (in this case, an open-jpa entity manager). 
         Note that the snippet only contains the beans that are relevant for the example, the others are omitted. Full working example with open-jpa entity manager can be found in the activiti-spring-examples (<literal>/activiti-spring/src/test/java/org/activiti/spring/test/jpa/JPASpringTest.java</literal>)
        <programlisting>
&lt;bean id=&quot;entityManagerFactory&quot; class=&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;&gt;
  &lt;property name=&quot;persistenceUnitManager&quot; ref=&quot;pum&quot;/&gt;
  &lt;property name=&quot;jpaVendorAdapter&quot;&gt;
    &lt;bean class=&quot;org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter&quot;&gt;
      &lt;property name=&quot;databasePlatform&quot; value=&quot;org.apache.openjpa.jdbc.sql.H2Dictionary&quot; /&gt;
    &lt;/bean&gt;
  &lt;/property&gt;
&lt;/bean&gt;

&lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.spring.SpringProcessEngineConfiguration&quot;&gt;
  &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;
  &lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot; /&gt;
  &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot; /&gt;
  <emphasis role="bold">&lt;property name=&quot;jpaEntityManagerFactory&quot; ref=&quot;entityManagerFactory&quot; /&gt;
  &lt;property name=&quot;jpaHandleTransaction&quot; value=&quot;true&quot; /&gt;
  &lt;property name=&quot;jpaCloseEntityManager&quot; value=&quot;true&quot; /&gt;</emphasis>
  &lt;property name=&quot;jobExecutorActivate&quot; value=&quot;false&quot; /&gt;
&lt;/bean&gt;
        </programlisting>
        The same configurations can also be done when building an engine programmatically, example:
        <programlisting>
ProcessEngine processEngine = ProcessEngineConfiguration
  .createProcessEngineConfigurationFromResourceDefault()
  <emphasis role="bold">.setJpaPersistenceUnitName("activiti-pu")</emphasis>
  .buildProcessEngine();
        </programlisting>
        </para>
        <para>
        Configuration properties:
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold"><literal>jpaPersistenceUnitName: </literal></emphasis>The name of the persistence-unit to use. (Make sure the persistence-unit is available on the classpath. According to the spec, the default
              location is <literal>/META-INF/persistence.xml</literal>). Use either <literal>jpaEntityManagerFactory</literal> or <literal>jpaPersistenceUnitName</literal>.
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold"><literal>jpaEntityManagerFactory: </literal></emphasis>An reference to a bean implementing <literal>javax.persistence.EntityManagerFactory</literal>
              that will be used to load the Entities and flushing the updates. Use either <literal>jpaEntityManagerFactory</literal> or <literal>jpaPersistenceUnitName</literal>.
            </para>
          </listitem>
           <listitem>
            <para>
              <emphasis role="bold"><literal>jpaHandleTransaction: </literal></emphasis>Flag indicating that the engine should begin and commit/rollback the transaction
              on the used <literal>EntityManager</literal> instances. Set to false when <literal>Java Transaction API (JTA)</literal> is used.
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold"><literal>jpaCloseEntityManager: </literal></emphasis>Flag indicating that the engine should close the <literal>EntityManager</literal> instance
              that was obtained from the <literal>EntityManagerFactory</literal>. Set to false when the <literal>EntityManager</literal> is container-managed
              (e.g. when using an Extended Persistence Context which isn't scoped to a single transaction').
            </para>
          </listitem>
        </itemizedlist>
      </para>
  </section>
  <section>
    <title>Usage</title>
    <section>
      <title>Simple Example</title>
      <para>
        Examples for using JPA variables can be found in <literal>JPAVariableTest</literal>. We'll explain <literal>JPAVariableTest.testUpdateJPAEntityValues</literal> step by step.
      </para>
      <para>
        First of all, we create a <literal>EntityManagerFactory</literal> for our persistence-unit, which is based on <literal>META-INF/persistence.xml</literal>. This contains classes which should be included in 
        the persistence unit and some vendor-specific configuration.
      </para>
      <para>
        We are using a simple entity in the test, having an id and <literal>String</literal> value property, which is also persisted. Before running the test, we create an entity and save this.
        <programlisting>
@Entity(name = "JPA_ENTITY_FIELD")
public class FieldAccessJPAEntity {

  @Id
  @Column(name = "ID_")
  private Long id;

  private String value;

  public FieldAccessJPAEntity() {
    // Empty constructor needed for JPA
  }

  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }
}       
        </programlisting>
      </para>
      <para>
        We start a new process instance, adding the entity as a variable. As with other variables, they are stored in the persistent storage of the engine. When the variable is requested the next time, it will be loaded from the <literal>EntityManager</literal>
        based on the class and Id stored.
        <programlisting>
Map&lt;String, Object&gt; variables = new HashMap&lt;String, Object&gt;();
variables.put("entityToUpdate", entityToUpdate);
    
ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("UpdateJPAValuesProcess", variables);
        </programlisting>
      </para>
      <para>
        The first node in our process definition contains a <literal>serviceTask</literal> that will invoke the method <literal>setValue</literal> on <literal>entityToUpdate</literal>, which resolves to
        the JPA variable we set earlier when starting the process instance and will be loaded from the <literal>EntityManager</literal> associated with the current engine's context'.
        <programlisting>
&lt;serviceTask id='theTask' name='updateJPAEntityTask' activiti:expression=&quot;${entityToUpdate.setValue('updatedValue')}&quot; /&gt;        
        </programlisting>
      </para>
      <para>
        When the service-task is finished, the process instance waits in a userTask defined in the process definition, which allows us to inspect the process instance. At this point, the <literal>EntityManager</literal> has been flushed
        and the changes to the entity have been pushed to the database. When we get the value of the variable <literal>entityToUpdate</literal>, it's loaded again and we get
        the entity with it's <literal>value</literal> property set to <literal>updatedValue</literal>. 
        <programlisting>
// Servicetask in process 'UpdateJPAValuesProcess' should have set value on entityToUpdate.
Object updatedEntity = runtimeService.getVariable(processInstance.getId(), "entityToUpdate");
assertTrue(updatedEntity instanceof FieldAccessJPAEntity);
assertEquals("updatedValue", ((FieldAccessJPAEntity)updatedEntity).getValue());
        </programlisting>
      </para>
    </section>
    
    <section>
      <title>Query JPA process variables</title>
      <para>
        You can query for <literal>ProcessInstance</literal>s and <literal>Execution</literal>s that have a certain JPA-entity as variable value. 
        <emphasis role="bold">Note that only <literal>variableValueEquals(name, entity)</literal> is supported for JPA-Entities on <literal>ProcessInstanceQuery</literal> and <literal>ExecutionQuery</literal></emphasis>.
        Methods <literal>variableValueNotEquals</literal>, <literal>variableValueGreaterThan</literal>, <literal>variableValueGreaterThanOrEqual</literal>, <literal>variableValueLessThan</literal> 
        and <literal>variableValueLessThanOrEqual</literal> are unsupported and will throw an <literal>ActivitiException</literal>
        when an JPA-Entity is passed as value.
        <programlisting>
 ProcessInstance result = runtimeService.createProcessInstanceQuery().variableValueEquals("entityToQuery", entityToQuery).singleResult();
        </programlisting>
      </para>
    </section>
    
    <section>
      <title>Advanced example using Spring beans and JPA</title>
      <para>
        A more advanced example, <literal>JPASpringTest</literal>, can be found in <literal>activiti-spring-examples</literal>. It describes the following simple use case:
        <itemizedlist>
          <listitem>
            <para>An existing Spring-bean which uses JPA entities already exists which allows for Loan Requests to be stored.</para>
          </listitem>
           <listitem>
            <para>Using Activiti, we can use the existing entities, obtained through the existing bean, and use them as variable in our process.</para>
            <para>
              Process is defined in the following steps:
               <itemizedlist>
                <listitem>
                  <para>Service task that creates a new LoanRequest, using the existing <literal>LoanRequestBean</literal> using variables received
                  when starting the process (e.g. could come from a start form). The created entity is stored as a variable, using <literal>activiti:resultVariable</literal>
                  which stores the expression result as a variable.
                  </para>
                </listitem>
                <listitem><para>UserTask that allows a manager to review the request and approve/disapprove, which is stored as a boolean variable <literal>approvedByManager</literal></para></listitem>
                <listitem><para>ServiceTask that updates the loan request entity so the entity is in sync with the process.</para></listitem>
                <listitem>
                  <para>Depending on the value of the entity property <literal>approved</literal>, an exclusive gateway is used to make a decision
                    about what path to take next: When the request is approved, process ends, otherwise, an extra task will become available (Send rejection letter), so the
                    customer can be notified manually by a rejection letter.
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </itemizedlist>
        Please note that the process doesn't contain any forms, since it is only used in a unit test.
        <mediaobject><imageobject><imagedata align="center" fileref="images/jpa.spring.example.process.png"/></imageobject></mediaobject>
      </para>
      <para>
        <programlisting>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;definitions id=&quot;taskAssigneeExample&quot; 
  xmlns=&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;
  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xmlns:activiti=&quot;http://activiti.org/bpmn&quot;
  targetNamespace=&quot;org.activiti.examples&quot;&gt;
  
  &lt;process id=&quot;LoanRequestProcess&quot; name=&quot;Process creating and handling loan request&quot;&gt;
    &lt;startEvent id='theStart' /&gt;
    &lt;sequenceFlow id='flow1' sourceRef='theStart' targetRef='createLoanRequest' /&gt;
    
    &lt;serviceTask id='createLoanRequest' name='Create loan request' 
      activiti:expression=&quot;${loanRequestBean.newLoanRequest(customerName, amount)}&quot; 
      activiti:resultVariable=&quot;loanRequest&quot;/&gt;    
    &lt;sequenceFlow id='flow2' sourceRef='createLoanRequest' targetRef='approveTask' /&gt;
    
    &lt;userTask id=&quot;approveTask&quot; name=&quot;Approve request&quot; /&gt;
    &lt;sequenceFlow id='flow3' sourceRef='approveTask' targetRef='approveOrDissaprove' /&gt;
    
    &lt;serviceTask id='approveOrDissaprove' name='Store decision' 
      activiti:expression=&quot;${loanRequest.setApproved(approvedByManager)}&quot; /&gt;
    &lt;sequenceFlow id='flow4' sourceRef='approveOrDissaprove' targetRef='exclusiveGw' /&gt;
    
    &lt;exclusiveGateway id=&quot;exclusiveGw&quot; name=&quot;Exclusive Gateway approval&quot; /&gt; 
    &lt;sequenceFlow id=&quot;endFlow1&quot; sourceRef=&quot;exclusiveGw&quot; targetRef=&quot;theEnd&quot;&gt;
      &lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&gt;${loanRequest.approved}&lt;/conditionExpression&gt;
    &lt;/sequenceFlow&gt;
    &lt;sequenceFlow id=&quot;endFlow2&quot; sourceRef=&quot;exclusiveGw&quot; targetRef=&quot;sendRejectionLetter&quot;&gt;
      &lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&gt;${!loanRequest.approved}&lt;/conditionExpression&gt;
    &lt;/sequenceFlow&gt;
    
    &lt;userTask id=&quot;sendRejectionLetter&quot; name=&quot;Send rejection letter&quot; /&gt;
    &lt;sequenceFlow id='flow5' sourceRef='sendRejectionLetter' targetRef='theOtherEnd' /&gt;
    
    &lt;endEvent id='theEnd' /&gt;
    &lt;endEvent id='theOtherEnd' /&gt;
  &lt;/process&gt;

&lt;/definitions&gt;

        </programlisting>
      </para>
      <para>Although the example above is quite simple, it shows the power of using JPA combined with Spring and parametrized method-expressions. The process requires
      no custom java-code at all (except for the Spring-bean off course) and speeds up development drastically.
      </para>
    </section>
  </section>
</chapter>
